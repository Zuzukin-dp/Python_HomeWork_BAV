# Home work 4
#
# Beshliu Aleksandr
#
#####################################################
# 1) У вас есть список my_list с значениями типа int.
# Распечатать те значения, которые больше 100.
# Задание выполнить с помощью цикла for.

my_list = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500]

for my_results in my_list:
    if my_results > 100:
        print(my_results)

#####################################################
# 2) У вас есть список my_list с значениями типа int, и пустой список my_results.
# Добавить в my_results те значения, которые больше 100.
# Распечатать список my_results.
# Задание выполнить с помощью цикла for.

my_list = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500]
my_results = []

for new_list in my_list:
    if new_list > 100:
        my_results.append(new_list)
print(my_results)

#####################################################
# 3) У вас есть список my_list с значениями типа int.
# Если в my_list количество элементов меньше 2, то в конец добавить значение 0.
# Если количество элементов больше или равно 2, то добавить сумму последних двух элементов.
# Количество элементов в списке можно получить с помощью функции len(my_list)

my_list = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500]

if len(my_list) < 2:
    my_list.append(0)
    print(my_list)
else:
    sum_last_two = my_list[-1] + my_list[-2]
    my_list.append(sum_last_two)
    print(my_list)

#####################################################
# 4) Пользователь вводит value - число с запятой (например 3.14) с клавиатуры.
# Вы приводите это value к типу float и выводите результат выражения value ** -1.
# Написать программу, которая вычисляет данное выражение и
# корректно обрабатывает возможные исключения.

value = input("Введите число: ")

try:
    value = float(value)
    value = value ** -1
    print(value)
except ValueError:
    print("Только числа")
except ZeroDivisionError:
    print("Ноль не подходит")

#####################################################
# 5) У вас есть список значений my_list и список индексов my_indexes
# (начинается с нуля и количество элементов совпадает с количеством в my_list.
# Распечатать значения из my_list через обращение по индексу. См. пример выше.

my_list = ["q", "w", "e", "r", "t", "y"]
my_indexes = list(range(len(my_list)))

for index in my_indexes:
    print(my_list[index])

#####################################################
# 6) У вас есть два списка my_list_1 и my_list_2 равной длинны и
# список индексов my_indexes (начинается с нуля и количество элементов
# совпадает с количеством в my_list_1.
# Распечатать пары значений из my_list_1 и my_list_2 через обращение по индексу.

my_list_1 = [1, 3, 5, 7, 9]
my_list_2 = [2, 4, 6, 8, 10]
my_indexes = [0, 1, 2, 3, 4]

for pair in my_indexes:
    print(f"({my_list_1[pair]}, {my_list_2[pair]})")

#####################################################
# 7) У вас есть строка my_string = '0123456789'.
# Сгенерировать целые числа (тип int) от 0 до 99 и поместить их в список.
# Задание нужно выполнить ТОЛЬКО через цикл в цикле(См. пример выше) и приведение типов .
# Генерирование через range или другие "фишки" я засчитывать не буду ))

my_string = "0123456789"
new_list = []

for num_1 in my_string:
    for num_2 in my_string:
        gen_num = int(num_1 + num_2)
        new_list.append(gen_num)
print(new_list)
